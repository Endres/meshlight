MeshConnector:
  - does all the network stuff
  - simple by design, nothing too special, any intelligence must be in higher layers
  - only intelligence is to save low level traffic, so to say: (but even this could go to the next layer)
    - if no node is connected, don't send at all (where to?)
    - if less than one bit of data is to be transmitted, do not send (maybe could be overridden for 0-bit "pokes")
  - handles the number of connected nodes (important parameter for animations) and informs somehow the next layer about changes (or will simply be polled)
  - offers one main function "broadcast(data)" where data consists of the raw network data to be broadcasted in the mesh
  - ideally this would be the painlessMesh Library, but I doubt a python implementation does exist, so let's write our own wrapper

TimeFrameRunner:
  - is effectively an extra thread
  - calls animation classes depending on currently set animation
  - calculates FPS utilization
  - given: TARGET_FPS (e.g. 10,15,20,60 FPS)
  - if execution of animation (+ tasks afterwards, such as broadcasting via Wi-Fi or updating thread output variables like RGB data and current FPS)
    is slower than 1/TARGET_FPS:
    - run next animation step, but with additional argument "skip=True".
    - slower animations can then make use of this and only increment counters or the like, but not actually generate new output
    - output furthermore will not be sent / updated /... to save time now
    - if enough frames skipped to be again on track, switch to normal mode again
  - normal mode / execution time faster than 1/TARGET_FPS:
    - run animation, broadcasting, data updates,...
    - rest of time until 1/TARGET_FPS is then sleep.
  - interesting: this layer can decide when to broadcast updates (or even intelligently unicast single changes), because it always is in the middle between network and content generation (animations), thus also acts as some kind of frame buffer, yeah! IoT frame buffer! :D

AnimationCollection:
  - lists all available animations, this is particularly useful for the web interface to be able to select from available animations
  - in the first version this was also handling the sequencing part (next section), however this should most probably be split up
  - as the feature set of AnimationCollection is little, this might be just implemented as module methods, or later on can be a whole class (saves resources)
  - just deprecate this in favor of static module functions and AnimationSequence!

AnimationSequence:
  - some kind of "auto play" feature
    - maybe automatically enabled after a specific amount of no user interaction...? (should be also be able to be disabled)
  - has a list of animations with their respective options that is played back. Options might be set through the web interface.
  - We definitely need some kind of mode switching between single animation mode and sequence playback in the web interface
  - eventhough, while playing animations, we can edit parameters of each sequence step
  - in single mode we are also able to edit the parameters, and probably to add current set to the sequence

Events:
  - there is some kind of event handling, maybe in yet another thread to make it more comfortable
  - the event queue circles through every current queue element
  - queue elements are executed once per event class loop (in other words, events with the same event information trigger at the exact same time, so they will be added to the current event queue)
    - the event class "GeoTimed" typically loops once a day (trigger is the specific time like Sunrise or Sunset)
    - the event class "Always" loops all over whenever
  - TODO: think about some offset which can be provided to allow fading and animation change on point, otherwise it will only trigger the fadeout of the prev. animation!!! inacceptable as when animations with end finish there will be no content that can be provided until fadeout which is boring! if an animation doesn't know when to end, (can be abrupt), this is quite difficult however... maybe animations have to provide something useful even if they have ended (like a loading animation that has finished but still has to wait now for the fadeout to switch, so it simply continues the last few seconds while fading out - at least when the end could not be foreseen)
  - TODO: also think about the race condition, whenever animations are too short to fully fade in thus overlap with fadeout (fadeout wins after the half of the total animation duration in this case), example:

normal behavior: fadeout and -in between animations whenever the end is
forseeable
   0 ends | 1 starts          (duration of 1)          1 ends | 2 starts
______          __________________________________________          _______...
      \        /                                          \        /
       \      /                                            \      /
   0    \    /                      1                       \    /      2
         \  /                                                \  /
          \/                                                  \/

behavior: 1 ends spontaneously but provides some filler animation
   0 ends | 1 starts                               1 ends |   | 2 starts
______          __________________________________________          _______...
      \        /                                          \        /
       \      /                                           X\      /
   0    \    /                      1                     XX\    /      2
         \  /                                             XXX\  /
          \/                                              XXXX\/

behavior: 1 is shorter than the fading time
  0 ends | 1 st.en | 2 starts
______                  _______...
      \                /
       \      /\      /
   0    \    /1 \    /      2
         \  /    \  /
          \/      \/

if it cannot provide any filler animation, it at least can decide if the same
than last or black frames should be used instead

(TODO) wanted behavior: crossfade between animations (forseeable)
 0 ends | 1 starts       (duration of 1)        1 ends | 2 starts
______     __________________________________________     _______...
      \   /                                          \   /
       \ /                                            \ /
   0    X                      1                       X      2
       / \                                            / \
      /   \                                          /   \

(spontaneously):
 0 ends | 1 starts                            1 ends | | 2 starts
______     __________________________________________     _______...
      \   /                                          \   /
       \ /                                           X\ /
   0    X                      1                     XX/      2
       / \                                           X/x\
      /   \                                          /xxx\

behavior: 1 is shorter than the fading time
  0 ends | 1 st.en | 2 starts
______        _______...
      \      /
       \ /\ /
   0    X1 X      2
       / \/ \
      /  /\  \

  - solution: some layering with opacity parameter of each animation layer

  - what if animation 2's priority is higher, thus starts even when 1 isn't yet finished?

Animations:
  - get called via TimeFrameRunner, which itself gets information about animation to run by the flask server
  - offer one important function named "frame(data, skip)". data consists of the rather universal I/O content that is processed here
  - the frame function can process the previous data and usually returns the next data (great for Animations!)
  - usually, because if skip=True, nothing needs to be returned (but for very simple animations, can but will be disposed anyway)
  - furthermore there must be some kind of a FPS base (maybe helpers?) so it can handle its process based on the target FPS rate.
    - think of a circular chaser animation that moves around the whole circle once every second
    - in this case we have 15 spots around the circle, so every forth frame the next spot has to get lit, to achieve the target of 60 FPS
    - simplest would be to include a frame counter and calculate based on that counter.
    ! (compare this planning note with the actual implementation of our very first animation, the RGBFader) !
  - the init function takes a configuration set (that contains all non-default parameters; what is even default??)
  - this configuration set is compared against a default configuration set and only changed parametes will be overridden
  - also, we need to be able to retreive the current configuration set including ranges and parameter types, from this information the web interface options will be generated
  - and the parameters might be changed on-the-fly
    - that means, range inputs send updated values when the slider is finished moving (i.e. mouseup, keyup event)
    - color inputs send updated values whenever the color changes (maybe ratelimited)
  - set_data API request should include a "set_parameters" with relation to which animation should be updated (only current static and sequence entries can be updated), and if sequence entry, the sequence element of the animation sequence
    - this includes a dict of options that point to the updated values
  - animations also can exit, because as of now no animations do exit which will result in indefinite loops when having some kind of a sequence without durations
    - animations can exit, but do not need to exit. how to fiddle with this? durations!
    - if a animation is run with "Inifinite" or better "Until End" duration, it will run indefinitely which is no problem
    - though, a limit can be set with the duration parameter the sequence provides, to limit the time it is run
    - this most likely has to be handled in the AnimationSequence animation itself, as this has direct access to running animations
    - if animations wish to exit now (because they don't have any new content to provide), they can somehow set a flag (class variable?)
