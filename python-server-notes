MeshConnector:
  - does all the network stuff
  - simple by design, nothing too special, any intelligence must be in higher layers
  - only intelligence is to save low level traffic, so to say: (but even this could go to the next layer)
    - if no node is connected, don't send at all (where to?)
    - if less than one bit of data is to be transmitted, do not send (maybe could be overridden for 0-bit "pokes")
  - handles the number of connected nodes (important parameter for animations) and informs somehow the next layer about changes (or will simply be polled)
  - offers one main function "broadcast(data)" where data consists of the raw network data to be broadcasted in the mesh
  - ideally this would be the painlessMesh Library, but I doubt a python implementation does exist, so let's write our own wrapper

TimeFrameRunner:
  - is effectively an extra thread
  - maybe needs AsyncIO(???) to exchange data (which animation, RGB output) with flask world
  - calls animation classes depending on current set animation
  - calculates FPS utilization
  - given: TARGET_FPS (e.g. 60 FPS)
  - if execution of animation (+ tasks afterwards, such as broadcasting via Wi-Fi or updating thread output variables like RGB data and current FPS)
    is slower than 1/TARGET_FPS:
    - run next animation step, but with additional argument "skip=True".
    - slower animations can then make use of this and only increment counters or the like, but not actually generate new output
    - output furthermore will not be sent / updated /... to save time now
    - if enough frames skipped to be again on track, switch to normal mode again
  - normal mode / execution time faster than 1/TARGET_FPS:
    - run animation, broadcasting, data updates,...
    - rest of time until 1/TARGET_FPS is then sleep.
  - interesting: this layer can decide when to broadcast updates (or even intelligently unicast single changes), because it always is in the middle between network and content generation (animations), thus also acts as some kind of frame buffer, yeah! IoT frame buffer! :D

Animations:
  - get called via TimeFrameRunner, which itself gets information about animation to run by the flask server
  - offer one important function named "frame(data, skip)". data consists of the rather universal I/O content that is processed here
  - the frame function can process the previous data and usually returns the next data (great for Animations!)
  - usually, because if skip=True, nothing needs to be returned (but for very simple animations, can but will be disused)
  - furthermore there must be some kind of a FPS base (maybe helpers?) so it can handle its process based on the target FPS rate.
    - think of a circular animation that turns around once every second (chaser around the round building)
    - in this case we have 15 spots around the building, so every forth frame the next spot has to get lit, to achieve the target of 60 FPS
    - simplest would be to include a frame counter and calculate based on that counter.
